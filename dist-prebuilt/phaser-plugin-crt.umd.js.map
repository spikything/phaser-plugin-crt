{"version":3,"file":"phaser-plugin-crt.umd.js","sources":["../src/CRTPostFX.ts","../src/CRTPlugin.ts"],"sourcesContent":["import Phaser from \"phaser\";\n\nexport interface CRTPipelineOptions {\n  curvature?: number; // 0.0 - 0.4\n  scanlineIntensity?: number; // 0.0 - 0.5\n  scanlineFreq?: number; // ~1.5 - 4.0\n  wobbleAmp?: number; // 0.0 - 0.003\n  wobbleFreq?: number; // 10 - 80\n  vignette?: number; // 0.0 - 1.0\n  desaturate?: number; // 0.0 - 1.0\n  gamma?: number; // 0.8 - 1.2\n  maskStrength?: number; // 0.0 - 0.1\n  noise?: number; // 0.0 - 0.3\n}\n\nexport const DEFAULTS: Required<CRTPipelineOptions> = {\n  curvature: 0.15,\n  scanlineIntensity: 0.15,\n  scanlineFreq: 1.9,\n  wobbleAmp: 0.0008,\n  wobbleFreq: 40.0,\n  vignette: 0.25,\n  desaturate: 0.08,\n  gamma: 1.05,\n  maskStrength: 0.04,\n  noise: 0.04,\n};\n\nexport class CRTPostFX extends Phaser.Renderer.WebGL.Pipelines.PostFXPipeline {\n  private _time = 0;\n  private _pendingOptions?: Required<CRTPipelineOptions>;\n\n  private getActiveShader(): Phaser.Renderer.WebGL.WebGLShader | undefined {\n    const self = this as unknown as {\n      currentShader?: Phaser.Renderer.WebGL.WebGLShader;\n      shaders?: Phaser.Renderer.WebGL.WebGLShader[];\n    };\n\n    return self.currentShader || self.shaders?.[0];\n  }\n\n  private applyPendingOptions(\n    shader?: Phaser.Renderer.WebGL.WebGLShader\n  ): void {\n    if (!this._pendingOptions) return;\n\n    const activeShader = shader ?? this.getActiveShader();\n    if (!activeShader) return;\n\n    const opts = this._pendingOptions;\n\n    this.set1f(\"curvature\", opts.curvature, activeShader);\n    this.set1f(\"scanlineIntensity\", opts.scanlineIntensity, activeShader);\n    this.set1f(\"scanlineFreq\", opts.scanlineFreq, activeShader);\n    this.set1f(\"wobbleAmp\", opts.wobbleAmp, activeShader);\n    this.set1f(\"wobbleFreq\", opts.wobbleFreq, activeShader);\n    this.set1f(\"vignetteAmt\", opts.vignette, activeShader);\n    this.set1f(\"desaturateAmt\", opts.desaturate, activeShader);\n    this.set1f(\"gammaAmt\", opts.gamma, activeShader);\n    this.set1f(\"maskStrength\", opts.maskStrength, activeShader);\n    this.set1f(\"noiseAmt\", opts.noise, activeShader);\n  }\n\n  constructor(game: Phaser.Game) {\n    super({\n      game,\n      name: \"CRTPostFX\",\n      // language=GLSL\n      fragShader: `\n      precision mediump float;\n\n      uniform sampler2D uMainSampler;\n      varying vec2 outTexCoord;\n\n      uniform float time;\n      uniform vec2 resolution;\n\n      uniform float curvature;\n      uniform float scanlineIntensity;\n      uniform float scanlineFreq;\n      uniform float wobbleAmp;\n      uniform float wobbleFreq;\n      uniform float vignetteAmt;\n      uniform float desaturateAmt;\n      uniform float gammaAmt;\n      uniform float maskStrength;\n      uniform float noiseAmt;\n\n      vec2 barrel(vec2 uv, float amt) {\n        vec2 cc = uv - 0.5;\n        float dist = dot(cc, cc);\n        return uv + cc * dist * amt;\n      }\n\n      float vignette(vec2 uv, float amt) {\n        float d = distance(uv, vec2(0.5));\n        float inner = 0.3;\n        float outer = 0.75;\n        float t = smoothstep(inner, outer, d);\n        return mix(1.0, 1.0 - amt, t);\n      }\n\n      float random(vec2 co) {\n        return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453123);\n      }\n\n      void main() {\n        vec2 uv = outTexCoord;\n\n        uv = barrel(uv, curvature);\n        uv.x += sin((uv.y + time * 0.6) * wobbleFreq) * wobbleAmp;\n\n        if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n          return;\n        }\n\n        vec3 col = texture2D(uMainSampler, uv).rgb;\n\n        float scan = 1.0 - scanlineIntensity * (0.5 + 0.5 * sin((uv.y * resolution.y) * 3.1415926 * scanlineFreq));\n        col *= scan;\n\n        float mask = 1.0 - maskStrength * (0.5 + 0.5 * sin((uv.x * resolution.x) * 3.1415926 * 2.0));\n        col *= vec3(1.0, mask, 1.0);\n\n        col *= vignette(uv, vignetteAmt);\n\n        float gray = dot(col, vec3(0.299, 0.587, 0.114));\n        col = mix(col, vec3(gray), desaturateAmt);\n        col = pow(col, vec3(gammaAmt));\n\n        float frameSeed = floor(time * 120.0);\n        float grain = random(gl_FragCoord.xy + vec2(frameSeed, frameSeed * 1.37));\n        float coarse = step(0.5, grain);\n        float staticValue = mix(grain, coarse, 0.6);\n        float noiseStrength = clamp(noiseAmt * 3.5, 0.0, 1.0);\n        col = mix(col, vec3(staticValue), noiseStrength);\n\n        gl_FragColor = vec4(col, 1.0);\n      }\n      `,\n    });\n  }\n\n  onBoot(): void {\n    this.applyPendingOptions();\n  }\n\n  onPreRender(): void {\n    const shader = this.getActiveShader();\n    if (!shader) return;\n\n    const dt = (this.game.loop.delta || 16.7) / 1000;\n    this._time += dt;\n    this.set1f(\"time\", this._time, shader);\n    this.set2f(\"resolution\", this.renderer.width, this.renderer.height, shader);\n    this.applyPendingOptions(shader);\n  }\n\n  public setOptions(opts: Required<CRTPipelineOptions>): void {\n    this._pendingOptions = opts;\n    this.applyPendingOptions();\n  }\n}\n","import Phaser from \"phaser\";\nimport { CRTPostFX, CRTPipelineOptions, DEFAULTS } from \"./CRTPostFX\";\n\nfunction isWebGL(\n  scene: Phaser.Scene | null | undefined\n): scene is Phaser.Scene {\n  if (!scene) return false;\n\n  const renderer = scene.game.renderer as\n    | Phaser.Renderer.WebGL.WebGLRenderer\n    | Phaser.Renderer.Canvas.CanvasRenderer\n    | undefined;\n\n  if (renderer && (renderer as Phaser.Renderer.WebGL.WebGLRenderer).gl) {\n    return true;\n  }\n\n  const type = (renderer as { type?: number } | undefined)?.type;\n  return type === Phaser.WEBGL;\n}\n\nfunction normalize(opts?: CRTPipelineOptions): Required<CRTPipelineOptions> {\n  return { ...DEFAULTS, ...(opts || {}) };\n}\n\nexport class CRTPlugin extends Phaser.Plugins.ScenePlugin {\n  private enabled = false;\n\n  constructor(\n    scene: Phaser.Scene,\n    pluginManager: Phaser.Plugins.PluginManager,\n    pluginKey: string\n  ) {\n    super(scene, pluginManager, pluginKey);\n  }\n\n  boot() {\n    const systems = this.systems;\n    if (!systems) return;\n\n    const events = systems.events;\n    events.on(Phaser.Scenes.Events.SHUTDOWN, this.disable, this);\n    events.on(Phaser.Scenes.Events.DESTROY, this.disable, this);\n  }\n\n  private ensureRegistered(scene: Phaser.Scene) {\n    const name = \"CRTPostFX\";\n    // @ts-ignore private-ish registries differ by Phaser versions\n    const reg = (scene.game.renderer as any)?.pipelines;\n    const already =\n      reg?._postPipelineClasses?.[name] || reg?.postFX?.pipelines?.[name];\n\n    if (!already) {\n      const renderer = scene.renderer;\n      if (renderer && \"pipelines\" in renderer) {\n        (\n          renderer as Phaser.Renderer.WebGL.WebGLRenderer\n        ).pipelines.addPostPipeline(name, CRTPostFX);\n      }\n    }\n  }\n\n  private forEachCam(\n    scene: Phaser.Scene,\n    fn: (cam: Phaser.Cameras.Scene2D.Camera) => void\n  ) {\n    scene.cameras?.cameras.forEach(fn);\n  }\n\n  private applyOptionsToCameras(\n    scene: Phaser.Scene,\n    opts: Required<CRTPipelineOptions>\n  ) {\n    this.forEachCam(scene, (cam) => {\n      const instances = cam.getPostPipeline(\"CRTPostFX\") as unknown;\n      const arr = Array.isArray(instances)\n        ? instances\n        : instances\n        ? [instances]\n        : [];\n      (arr as CRTPostFX[]).forEach((p) => p.setOptions(opts));\n    });\n  }\n\n  enable(options?: CRTPipelineOptions) {\n    const scene = this.scene;\n    if (!isWebGL(scene)) return;\n\n    this.ensureRegistered(scene);\n\n    this.forEachCam(scene, (cam) => cam.setPostPipeline(\"CRTPostFX\"));\n    this.applyOptionsToCameras(scene, normalize(options));\n    this.enabled = true;\n\n    scene.scale?.on(\"resize\", () => {\n      this.applyOptionsToCameras(scene, normalize(options));\n    });\n  }\n\n  disable() {\n    const scene = this.scene;\n    if (!isWebGL(scene)) return;\n\n    this.forEachCam(scene, (cam) => {\n      try {\n        cam.removePostPipeline(\"CRTPostFX\");\n      } catch {}\n    });\n    this.enabled = false;\n  }\n\n  update(options: CRTPipelineOptions) {\n    const scene = this.scene;\n    if (!isWebGL(scene)) return;\n\n    this.applyOptionsToCameras(scene, normalize(options));\n  }\n\n  toggle(options?: CRTPipelineOptions) {\n    if (this.enabled) this.disable();\n    else this.enable(options);\n  }\n}\n\n// Optional convenience namespace for typing on scene.crt\ndeclare global {\n  namespace Phaser {\n    interface Scene {\n      crt: CRTPlugin;\n    }\n  }\n}\n"],"names":[],"mappings":"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"}